name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'

jobs:
  # Job 1: Lint and Test
  test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint || echo "Linter not configured"
        continue-on-error: true

      - name: Run tests
        run: npm run test:run

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  # Job 2: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run security testing script
        run: |
          if [ -f "./test-security.sh" ]; then
            chmod +x ./test-security.sh
            ./test-security.sh
          fi
        continue-on-error: true

  # Job 3: Build Frontend
  build:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  # Job 4: Build Docker Image (on main branch only)
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: github.event_name == 'push'

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/service-template
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 5: Deploy to Production (manual trigger)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://your-production-url.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "üöÄ Deployment step - configure based on your hosting platform"
          echo "Options:"
          echo "  - AWS: Use aws-actions/configure-aws-credentials"
          echo "  - DigitalOcean: Use appleboy/ssh-action"
          echo "  - Vercel: Use vercel-action"
          echo "  - Heroku: Use akhileshns/heroku-deploy"
          echo "  - Custom: SSH and run docker-compose"

      # Example: Deploy via SSH
      # - name: Deploy via SSH
      #   uses: appleboy/ssh-action@v1.0.0
      #   with:
      #     host: ${{ secrets.PRODUCTION_HOST }}
      #     username: ${{ secrets.PRODUCTION_USER }}
      #     key: ${{ secrets.PRODUCTION_SSH_KEY }}
      #     script: |
      #       cd /opt/ecommerce
      #       docker-compose pull
      #       docker-compose up -d
      #       docker system prune -f

  # Job 6: Notify on Success/Failure
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: always()

    steps:
      - name: Check workflow status
        run: |
          if [ "${{ needs.test.result }}" == "failure" ] || \
             [ "${{ needs.security.result }}" == "failure" ] || \
             [ "${{ needs.build.result }}" == "failure" ]; then
            echo "‚ùå Workflow failed"
            exit 1
          else
            echo "‚úÖ Workflow succeeded"
          fi

      # Optional: Slack notification
      # - name: Slack notification
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     text: 'CI/CD Pipeline completed'
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      #   if: always()
